using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using MyLibrary.Models;


namespace MyLibrary.Controllers
{
    public class LibrariesController : Controller
    {
        private I_CoposEntities db = new I_CoposEntities();

        // GET: Libraries
        public ActionResult Index()
        {
            return View(db.Libraries.OrderBy(p => p.Author).Distinct().ToList());
        }



        // GET: Libraries/Create
        public ActionResult Create()
        {
            return View();
        }

    
        // POST: Libraries/Create
        [HttpPost]

        public JsonResult Create([Bind(Include = "id,BookName,Author,Isbn13,Isbn10,Publisher,YearPublished,CoverImage,QtyAvailable")] Library library)
        {
            if (ModelState.IsValid)
            {
                
                    db.Libraries.Add(library);
                    //db.SaveChanges();

                    BooksAvailable bookAvailable = new BooksAvailable
                    {
                        id = library.id,
                        BookName = library.BookName,
                        Author = library.Author,
                        Isbn13 = library.Isbn13,
                        Isbn10 = library.Isbn10,
                        Publisher = library.Publisher,
                        YearPublished = library.YearPublished,
                        CoverImage = library.CoverImage,
                        QtyAvailable = library.QtyAvailable
                    };
                    db.BooksAvailables.Add(bookAvailable);
                    db.SaveChanges();

                    return Json(new { success = true, message = "The series for this book has been created successfully!" });
                
                
            }
            else
            {
                return Json(new { success = false, message = "Validation failed. The book could not be created." });
            }
        }



        // GET: Libraries/Edit/5
        [HttpGet]
        public JsonResult GetBookDetails(int id)
        {
            var book = db.Libraries.Find(id);
            if (book == null)
            {
                return Json(new { success = false, message = "Book not found." }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { success = true, book = book }, JsonRequestBehavior.AllowGet);
        }

        // POST: Libraries/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        public JsonResult Edit([Bind(Include = "id,BookName,Author,Isbn13,Isbn10,Publisher,YearPublished,CoverImage,QtyAvailable")] Library library)
        {
            if (ModelState.IsValid)
            {
                db.Entry(library).State = EntityState.Modified;
               
                //Actualizm detaliile in tabela BooksAvailables
                var bookAvailable = db.BooksAvailables.FirstOrDefault(b => b.BookName == library.BookName);
                if (bookAvailable != null)
                {
                    bookAvailable.QtyAvailable = library.QtyAvailable;
                    db.SaveChanges();
                }

                return Json(new { success = true, message = "Book updated successfully", book = library });
            }
            return Json(new { success = false, message = "Validation failed" });
        }





        // GET: Libraries/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Library library = db.Libraries.Find(id);
            if (library == null)
            {
                return HttpNotFound();
            }
            return View(library);
        }


        // POST: Libraries/Delete/5
        [HttpPost, ActionName("Delete")]
        public JsonResult DeleteConfirmed(int id)
        {
            //We check if the book is borrowed in Borrow
            bool isBookBorrowed = db.Barrows.Any(b => b.BorrowedBookId == id);
            //Check if the book is in the waiting list
            bool isBookInWaitlist = db.Waitlists.Any(w => w.WaitlistId == id);

            if (isBookBorrowed)
            {
                return Json(new { success = false, message = "The book is borrowed, you cannot delete it!" });
            }
            else if (isBookInWaitlist)
            {
                return Json(new { success = false, message = "The book is in the waiting list, you cannot delete it!" });
            }
            else
            {

                Library library = db.Libraries.Find(id);
                if (library == null)
                {
                    return Json(new { success = false, message = "Book not found." });
                }


                db.Libraries.Remove(library);

                // Look for the book in the BooksAvailables table and delete it if it exists
                BooksAvailable bookAvailable = db.BooksAvailables.FirstOrDefault(ba => ba.id == id);
                if (bookAvailable != null)
                {
                    db.BooksAvailables.Remove(bookAvailable);
                    
                }

                db.SaveChanges();

                return Json(new { success = true, message = "The book was successfully deleted." });
            }



        }



        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}



@using MyLibrary.ADClasses
@{ var usrData = new UserInfo(); }

@model IEnumerable<MyLibrary.Models.Library>

@{
    ViewBag.Title = "Index";
}

<style>


    table.table {
        text-align: center;
        margin: 0 auto;
    }

    table-container table {
        width: 100%;
        border-collapse: collapse;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
    }

    .table-container table th {
        background-color: #333;
        color: #fff;
    }

    .table-container table th,
    .table-container table td {
        padding: 10px;
        text-align: center;
        vertical-align: middle;
        border: 1px solid #ddd;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
    }

        .action-buttons a {
            margin: 5px;
        }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 1;
        justify-content: center;
        align-items: center;
        display: flex;
    }

    .modal-content {
        background-color: #fff;
        margin: 15% auto;
        padding: 20px;
        border-radius: 5px;
        width: 80%;
        max-width: 500px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        max-width: 80%;
        width: 300px;
        overflow-y: auto;
        margin: auto;
    }

    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 10px;
        cursor: pointer;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            font-weight: bold;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
        font-size: 11px;
    }


    button[type="button"] {
        background-color: #007BFF;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        font-size: 16px;
    }

        button[type="button"]:hover {
            background-color: #0056b3;
        }
</style>

@if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

@if (!string.IsNullOrEmpty(TempData["SuccessMessage"] as string))
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

@if (usrData.checkIfUserIsAdmin())
{
    <h2 class="text-center mb-4">Admin Books</h2>

    <div class="text-center mb-4">
        <button onclick="openModal()" class="btn btn-warning">Create New Book</button>

    </div>

    <div class="table-container">
        <table class="table table-bordered table-striped shadow">
            <tr>
                <th>@Html.DisplayNameFor(model => model.BookName)</th>
                <th>@Html.DisplayNameFor(model => model.Author)</th>
                <th>@Html.DisplayNameFor(model => model.Isbn13)</th>
                <th>@Html.DisplayNameFor(model => model.Isbn10)</th>
                <th>@Html.DisplayNameFor(model => model.Publisher)</th>
                <th>@Html.DisplayNameFor(model => model.YearPublished)</th>
                <th>@Html.DisplayNameFor(model => model.CoverImage)</th>
                <th>@Html.DisplayNameFor(model => model.QtyAvailable)</th>
                <th>Actions</th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.BookName)</td>
                    <td>@Html.DisplayFor(modelItem => item.Author)</td>
                    <td>@Html.DisplayFor(modelItem => item.Isbn13)</td>
                    <td>@Html.DisplayFor(modelItem => item.Isbn10)</td>
                    <td>@Html.DisplayFor(modelItem => item.Publisher)</td>
                    <td>@Html.DisplayFor(modelItem => item.YearPublished)</td>
                    <td>
                        <img src="@item.CoverImage" class="img-thumbnail" alt="" width="50" height="150" />
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.QtyAvailable)</td>
                    <td class="action-buttons">

                        <button onclick="openEditModal(@item.id)" class="btn btn-primary">Edit</button>
                        <button type="button" class="btn btn-primary btn-sm" onclick="openDeleteConfirmModal(@item.id)">Delete</button>
                    </td>
                </tr>
            }
        </table>
    </div>
}



<!-- Modal Create -->
<div id="createModal" class="modal" style="display:none">
    <div class="modal-content">
        <h2>Create New Book</h2>
        <form id="createForm" method="post">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label for="BookName">Book Name:</label>
                <input type="text" id="BookName" name="BookName" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="Author">Author:</label>
                <input type="text" id="Author" name="Author" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="Isbn13">ISBN-13:</label>
                <input type="text" id="Isbn13" name="Isbn13" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="Isbn10">ISBN-10:</label>
                <input type="text" id="Isbn10" name="Isbn10" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="Publisher">Publisher:</label>
                <input type="text" id="Publisher" name="Publisher" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="YearPublished">Year Published:</label>
                <input type="text" id="YearPublished" name="YearPublished" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="CoverImage">Cover Image URL:</label>
                <input type="text" id="CoverImage" name="CoverImage" class="form-control" required>
            </div>

            <div class="form-group">
                <label for="QtyAvailable">Quantity Available:</label>
                <input type="number" id="QtyAvailable" name="QtyAvailable" class="form-control" required>
            </div>
            <div class="form-group">
                <button type="button" onclick="createBook()" class="btn btn-warning">Create</button>
                <button type="button" onclick="closeModal()" class="btn btn-secondary">Close</button>
                </div>
        </form>
    </div>
</div>




<!--JavaScript Create -->
<script>
    function openModal() {
        document.getElementById("createModal").style.display = "block";
    }

    function closeModal() {
        document.getElementById("createModal").style.display = "none";
    }

    function createBook() {
        var bookData = {
            BookName: document.getElementById("BookName").value,
            Author: document.getElementById("Author").value,
            Isbn13: document.getElementById("Isbn13").value,
            Isbn10: document.getElementById("Isbn10").value,
            Publisher: document.getElementById("Publisher").value,
            YearPublished: document.getElementById("YearPublished").value,
            CoverImage: document.getElementById("CoverImage").value,
            QtyAvailable: document.getElementById("QtyAvailable").value

        };

        $.ajax({
            type: "POST",
            url: "/Libraries/Create",
            data: bookData,
            success: function (response) {
                if (response.success) {

                    alert(response.message);
                    closeModal();
                } else {

                    alert("Error: " + response.message);
                }
            },
            error: function (error) {
                alert("An error occurred: " + error.statusText);
            }
        });
    }
</script>



<!-- Modal edit -->
<div id="editModal" class="modal" style="display: none;">
    <div class="modal-content">

        <h2>Edit Book</h2>
        <form id="editForm" method="post">
            @Html.AntiForgeryToken()
            <div class="form-group">
                <label for="BookName">Book Name:</label>
                <input type="text" id="BookName" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="Author">Author:</label>
                <input type="text" id="Author" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="Isbn13">ISBN-13:</label>
                <input type="text" id="Isbn13" class="form-control">
            </div>
            <div class="form-group">
                <label for="Isbn10">ISBN-10:</label>
                <input type="text" id="Isbn10" class="form-control">
            </div>
            <div class="form-group">
                <label for="Publisher">Publisher:</label>
                <input type="text" id="Publisher" class="form-control">
            </div>
            <div class="form-group">
                <label for="YearPublished">Year Published:</label>
                <input type="text" id="YearPublished" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="CoverImage">Cover Image URL:</label>
                <input type="text" id="CoverImage" class="form-control">
            </div>
            <div class="form-group">
                <label for="QtyAvailable">Quantity Available:</label>
                <input type="number" id="QtyAvailable" class="form-control" required>
            </div>

            <div class="form-group">
                <button type="button" onclick="saveEdit()" class="btn btn-primary">Save</button>
                <button type="button" onclick="closeEditModal()" class="btn btn-secondary">Close</button>
            </div>
        </form>
    </div>
</div>





<!-- JavaScript pentru Edit -->
<script>
    var bookIdToEdit = 0;

    function openEditModal(bookId) {
        bookIdToEdit = bookId;
        $.ajax({
            type: "GET",
            url: "/Libraries/GetBookDetails/" + bookId,
            success: function (data) {
                if (data.success) {
                    document.getElementById("BookName").value = data.book.BookName;
                    document.getElementById("Author").value = data.book.Author;
                    document.getElementById("Isbn13").value = data.book.Isbn13;
                    document.getElementById("Isbn10").value = data.book.Isbn10;
                    document.getElementById("Publisher").value = data.book.Publisher;
                    document.getElementById("YearPublished").value = data.book.YearPublished;
                    document.getElementById("CoverImage").value = data.book.CoverImage;
                    document.getElementById("QtyAvailable").value = data.book.QtyAvailable;
                    document.getElementById("editModal").style.display = "block";
                } else {
                    alert(data.message);
                }
            },
            error: function (error) {
                alert("An error occurred: " + error.statusText);
            }
        });
    }

    function closeEditModal() {
        document.getElementById("editModal").style.display = "none";
    }

    function saveEdit() {
        var editedData = {
            id: bookIdToEdit,
            BookName: document.getElementById("BookName").value,
            Author: document.getElementById("Author").value,
            Isbn13: document.getElementById("Isbn13").value,
            Isbn10: document.getElementById("Isbn10").value,
            Publisher: document.getElementById("Publisher").value,
            YearPublished: document.getElementById("YearPublished").value,
            CoverImage: document.getElementById("CoverImage").value,
            QtyAvailable: document.getElementById("QtyAvailable").value
        };

        $.ajax({
            type: "POST",
            url: "/Libraries/Edit",
            data: editedData,
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    closeEditModal();
                    location.reload();
                } else {
                    alert(response.message);
                }
            },
            error: function (error) {
                alert("An error occurred: " + error.statusText);
            }
        });
    }
</script>



!-- Modal de confirmare pentru ștergere -->
<div id="deleteConfirmModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeDeleteConfirmModal()">&times;</span>
        <h2>Confirm Delete</h2>
        <p>Are you sure you want to delete this book?</p>
        <div class="form-group">
            <button type="button" onclick="confirmDelete()" class="btn btn-danger">Yes</button>
            <button type="button" onclick="closeDeleteConfirmModal()" class="btn btn-secondary">No</button>
        </div>
    </div>
</div>


<div id="messageModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeMessageModal()">&times;</span>
        <h2>Message</h2>
        <p id="messageText"></p>
        <div class="form-group">
            <button type="button" onclick="closeDeleteConfirmModal()" class="btn bs-secondary">Close</button>
        </div>
    </div>
</div>

<div id="deleteWarningModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeMdeleteWarningModal()">&times;</span>
        <h2>Warning</h2>
        <p>The book is borrowed or the book is in the waiting list, you cannot delete it!</p>
        <div class="form-group">
            <button type="button" onclick="closeDeleteConfirmModal()" class="btn bs-secondary">Close</button>
        </div>
    </div>
</div>


<script>
    var bookIdToDelete = 0;

    function openDeleteConfirmModal(bookId) {
        bookIdToDelete = bookId;
        document.getElementById("deleteConfirmModal").style.display = "block";
    }

    function closeDeleteConfirmModal() {
        document.getElementById("deleteConfirmModal").style.display = "none";
    }

    function confirmDelete() {
        $.ajax({
            type: "POST",
            url: "/Libraries/Delete/" + bookIdToDelete,
            success: function (data) {
                if (data.success) {
                    document.getElementById("messageText").innerHTML = data.message;
                    document.getElementById("messageModal").style.display = "block";
                    closeDeleteConfirmModal();
                } else {
                    alert(data.message);
                }
            },
            error: function (error) {
                alert("An error occurred: " + error.statusText);
            }
        });
    }

    function closeDeleteConfirmModal() {
        document.getElementById("deleteConfirmModal").style.display = "none";
    }

    function closeDeleteConfirmModal() {
        document.getElementById("deleteConfirmModal").style.display = "none";
    }
</script>







